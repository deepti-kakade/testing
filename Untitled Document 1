String 1 :
RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag.


String 2 :
RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used.


1. Find occurance of RUBY from string 1.
irb(main):015:0> string1.scan("RUBY").count
=>3

2. Find the position where RUBY occures in the string 1.

3. Create array of words in string 1 & print them using a recursive function.

irb(main):011:0> str=string1.split
=> ["RUBY", "parses", "a", "file", "by", "looking", "for", "<br/>", "one", "of", "the", "special", "tags", "that", "tells", "it", "to", "start", "interpreting", "the", "text", "as", "RUBY", "code.", "The", "parser", "then", "executes", "all", "of", "the", "code", "it", "finds", "until", "it", "runs", "into", "a", "RUBY", "closing", "<br/>", "tag."]
irb(main):012:0> str.each do |i| puts i end
RUBY
parses
a
file
by
looking
for
<br/>
one
of
the
special
tags
that
tells
it
to
start
interpreting
the
text
as
RUBY
code.
The
parser
then
executes
all
of
the
code
it
finds
until
it
runs
into
a
RUBY
closing
<br/>
tag.
=> ["RUBY", "parses", "a", "file", "by", "looking", "for", "<br/>", "one", "of", "the", "special", "tags", "that", "tells", "it", "to", "start", "interpreting", "the", "text", "as", "RUBY", "code.", "The", "parser", "then", "executes", "all", "of", "the", "code", "it", "finds", "until", "it", "runs", "into", "a", "RUBY", "closing", "<br/>", "tag."]

4. Capitalise string 1
irb(main):078:0> string1.capitalize
=> "Ruby parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as ruby code. the parser then executes all of the code it finds until it runs into a ruby closing <br/> tag."

5. Combine string 1 & 2.
irb(main):014:0> string1.concat(string2)
=> "RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag.RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used."

7.Print current date
irb(main):015:0> t1=Time.now
=> Thu Dec 13 12:57:37 +0530 2012
irb(main):016:0> puts t1
Thu Dec 13 12:57:37 +0530 2012

=> nil
irb(main):019:0> t1=Time.now
=> Thu Dec 13 13:30:17 +0530 2012
irb(main):020:0> t1.strftime("%x")
=> "12/13/12"

6. Print string 1 & 2 using heredoc.
irb(main):022:0> string1=<<HEREDOC
irb(main):023:0" RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code
irb(main):024:0" The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag.
irb(main):025:0" HEREDOC
=> "RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code\nThe parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag.\n"

irb(main):026:0> string2=<<HEREDOC
irb(main):027:0" RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used.
irb(main):028:0" HEREDOC
=> "RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used.\n"


8. print 12th Jan 2012
irb(main):032:0> t1=Time.mktime(year1,month1,date)
=> Thu Jan 12 00:00:00 +0530 2012
irb(main):034:0> t1.strftime("%d %b %Y")
=> "12 Jan 2012"

9. add 7 days in current date
irb(main):002:0> t2=Time.now+(7*24*60*60)
=> Thu Dec 20 00:00:00 +0530 2012

10. Cut the string 1 into 4 parts & print it.
 irb(main):063:0> str=string1.split('',4)
=> ["R", "U", "B", "Y parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag."]
irb(main):070:0> puts str
R
U
B
Y parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag.
11. Divide the string 1 by occurances of '.'. Combine the array in reverse word sequence

irb(main):071:0> str=string1.split('.')
=> ["RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code", " The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag"]

irb(main):073:0> str.reverse
=> [" The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag", "RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code"]


12. Remove the HTML characters from string.
irb(main):009:0> str=string1.gsub!(/(<[^>]*>)|\n|\t/s) {""}
=> "RUBY parses a file by looking for  one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing  tag."
13. Print the 'RUBY' word from string 1 by traversing it using string functions

irb(main):026:0> puts string1.scan("RUBY")
RUBY
RUBY
RUBY

14. Find the length of string 1 & 2

irb(main):012:0> string1.length
=> 217
irb(main):014:0> string2.length
=> 162




15. Create file & write string 1 to that file using RUBY functions.
irb(main):042:0> file=File.new("/home/webonise/Desktop/ab","w+")
=> #<File:/home/webonise/Desktop/ab>
irb(main):043:0> if file
irb(main):044:1> file.write(string1)
irb(main):045:1> else
irb(main):046:1* puts "Error........................"
irb(main):047:1> end
=> 217


16. Print all Global varibles provided by RUBY
irb(main):014:0> puts global_variables
$-w
$:
$.
$KCODE
$-F
$*
$stderr
$,
$`
$binding
$-p
$"
$$
$<
$@
$-v
$-i
$deferr
$\
$=
$;
$PROGRAM_NAME
$stdout
$&
$-d
$LOAD_PATH
$-a
$VERBOSE
$FILENAME
$defout
$-0
$+
$0
$stdin
$~
$DEBUG
$-I
$_
$-K
$>
$/
$'
$-l
$LOADED_FEATURES
$?
$SAFE
$!
$&
$`
$'
$+
$1
$2
$3
$4
$5
$6
$7
$8
$9
=> nil

17. Usage and examples of Header (RUBY) 


18. Redirect page 1 to page 2.

19. Compare two dates. (12-4-2010 & 12-5-2011). Calculate the days between these two dates.

irb(main):054:0> t1=Time.mktime(2010,12,04)
=> Sat Dec 04 00:00:00 +0530 2010
irb(main):055:0> t1=Time.mktime(2011,12,05)
=> Mon Dec 05 00:00:00 +0530 2011

irb(main):074:0> t3=t2.year-t1.year
=> 1
irb(main):075:0> t4=t2.month-t2.month
=> 0
irb(main):077:0> t5=t2.day-t1.day
=> 1
irb(main):081:0> t8=(t3*365)+t5+t4
=> 366



20. Print date after 20 days from current date
irb(main):029:0> t1=Time.now+(20*24*60*60)
=> Wed Jan 02 17:58:52 +0530 2013

21. Print date in array format.
irb(main):018:0> t1=Time.now
=> Thu Dec 13 15:39:31 +0530 2012
irb(main):019:0> array1=t1.to_a
=> [31, 39, 15, 13, 12, 2012, 4, 348, false, "IST"]
